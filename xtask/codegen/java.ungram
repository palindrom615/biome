// java Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree

SyntaxElement = SyntaxElement

JavaBogus = SyntaxElement*
JavaBogusValue = SyntaxElement*

JavaRoot =
    bom: 'UNICODE_BOM'?
    package: JavaPackage
    imports: JavaImportList
    classes: JavaClassList
    eof: 'EOF'

JavaPackage =
    'package'
    name: 'ident'
    ';'

JavaImportList =
    JavaImport*

JavaImport =
    'import'
    name: 'ident'
    ';'

JavaClassList =
    JavaClass*

JavaClass =
    'class'
    name: 'ident'
    body: JavaClassBody

JavaClassBody =
    '{'
    members: JavaClassMemberList
    '}'

JavaClassMemberList =
    JavaClassMember*

JavaClassMember =
    JavaField
    | JavaMethod

JavaField =
    'field'
    name: 'ident'
    type: 'ident'
    ';'

JavaMethod =
    'method'
    name: 'ident'
    returnType: 'ident'
    body: JavaMethodBody

JavaMethodBody =
    '{'
    statements: JavaStatementList
    '}'

JavaStatementList =
    JavaStatement*

JavaStatement =
    JavaExpressionStatement
    | JavaReturnStatement

JavaExpressionStatement =
    'expression'
    ';'

JavaReturnStatement =
    'return'
    expression: JavaExpression
    ';'

JavaExpression =
    JavaLiteral
    | JavaVariable
    | JavaMethodCall

JavaLiteral =
    'literal'
    value: 'ident'
    ';'

JavaVariable =
    'variable'
    name: 'ident'
    ';'

JavaMethodCall =
    'methodCall'
    name: 'ident'
    '('
    arguments: JavaExpressionList
    ')'
    ';'

JavaExpressionList =
    JavaExpression (',' JavaExpression)* ','?
